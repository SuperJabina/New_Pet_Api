{"uid":"d7795633f7de1000","name":"Get all todos. Headers[None] Params [{'doneStatus': True}]","fullName":"tests.test_challenges.TestGetChallenges#test_03_get_all_todos","historyId":"8d59b1e8587add8412194979cc19996a","time":{"start":1748718144135,"stop":1748718144145,"duration":10},"description":"\n            Тестирует GET /todos с различными заголовками.\n            ","descriptionHtml":"<pre><code>        Тестирует GET /todos с различными заголовками.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Body key value mismatches:\ndoneStatus: key not found in any record","statusTrace":"self = <test_challenges.TestChallenges.TestGetChallenges object at 0x7f8506c7a030>\ntodos_client = <clients.todos_client.TodosClient object at 0x7f8506cab5c0>\nheaders = None, params = {'doneStatus': True}\nexpected_status = <HTTPStatus.OK: 200>\n\n    @pytest.mark.regression\n    @allure.title(\"Get all todos. Headers[{headers}] Params [{params}]\")\n    @pytest.mark.parametrize(\n        \"headers, params, expected_status\",\n        [\n            (None, None, HTTPStatus.OK),  # Заголовки по умолчанию (из settings)\n            (None, {\"doneStatus\": True},HTTPStatus.OK),  # query параметр/фильтр\n            ({\"X-Challenger\": \"\"},None, HTTPStatus.OK),  # Пустой X-Challenger\n            ({\"X-Challenger\": \"test_token\", \"Accept\": \"application/xml\"}, None, HTTPStatus.OK),  # Дополнительный\n            # заголовок\n            (None, {\"id\": 3}, HTTPStatus.OK),  # query параметр/фильтр\n            ({\"Authorization\": \"Bearer invalid\"}, None, HTTPStatus.OK),  # Неверный заголовок\n        ],\n        ids=[\n            \"default_headers\",\n            \"doneStatus: True\",\n            \"empty_token\",\n            \"Accept_with_application/xml\",\n            \"id: 3\",\n            \"Wrong token\"\n        ]\n    )\n    def test_03_get_all_todos(self, todos_client: TodosClient, headers: dict | None, params: dict |\n                                                                                             None, expected_status:\n    int):\n        \"\"\"\n        Тестирует GET /todos с различными заголовками.\n        \"\"\"\n        checks = {\n            \"status_code\": expected_status,\n            \"response_time\": 5.0,\n            \"schema\": True,\n            \"headers_present\": [\"content-type\"],\n            \"header_values\": None,\n            \"key_present\": [\"todos\"],\n            \"key_value\": params,\n            \"request_headers\": headers\n        }\n        response = todos_client.get_all_todos(headers=headers, params=params)\n>       self.comprehensive_checks(response=response, checks=checks)\n\ntests/test_challenges.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/assertions/base_assertions.py:487: in comprehensive_checks\n    self.assert_body_key_values(response, checks[\"key_value\"])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_challenges.TestChallenges.TestGetChallenges object at 0x7f8506c7a030>\nresponse = <Response [200 OK]>, expected_values = {'doneStatus': True}\n\n    @allure.step(\"Check body key values: {expected_values}\")\n    def assert_body_key_values(self, response: Response, expected_values: Dict[str, Any]) -> None:\n        \"\"\"\n        Проверяет, что хотя бы одна запись в JSON-теле ответа содержит указанные ключи с ожидаемыми значениями.\n    \n        :param response: Объект HTTP-ответа (httpx.Response)\n        :param expected_values: Словарь с ключами и их ожидаемыми значениями\n        :raises AssertionError: Если JSON невалидный или ни одна запись не содержит ожидаемого значения\n        \"\"\"\n        logger.info(f\"Checking body key values: {expected_values}\")\n        try:\n            body = response.json()\n        except ValueError as e:\n            logger.error(f\"Response body is not valid JSON: {e}\")\n            allure.attach(\n                response.text,\n                name=\"Invalid JSON\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            raise AssertionError(f\"Response body is not valid JSON: {e}\")\n    \n        def find_key_values(data: Any, key: str, matches: List[Any]) -> None:\n            \"\"\"\n            Рекурсивно ищет все вхождения ключа в JSON и собирает их значения.\n    \n            :param data: Текущий JSON-объект (dict, list и т.д.)\n            :param key: Искомый ключ\n            :param matches: Список для хранения найденных значений\n            \"\"\"\n            if isinstance(data, dict):\n                if key in data:\n                    matches.append(data[key])\n                for value in data.values():\n                    find_key_values(value, key, matches)\n            elif isinstance(data, list):\n                for item in data:\n                    find_key_values(item, key, matches)\n    \n        mismatches = []\n        for key, expected_value in expected_values.items():\n            matches = []\n            find_key_values(body, key, matches)\n            if not matches:\n                mismatches.append(f\"{key}: key not found in any record\")\n            elif not any(actual_value == expected_value for actual_value in matches):\n                mismatches.append(\n                    f\"{key}: expected '{expected_value}', found values {matches}\"\n                )\n    \n        if mismatches:\n            logger.error(f\"Body key value mismatches: {mismatches}\")\n            allure.attach(\n                \"\\n\".join(mismatches),\n                name=\"Body Key Value Mismatches\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            allure.attach(\n                response.text,\n                name=\"Response Body\",\n                attachment_type=allure.attachment_type.JSON\n            )\n>           raise AssertionError(f\"Body key value mismatches:\\n{'\\n'.join(mismatches)}\")\nE           AssertionError: Body key value mismatches:\nE           doneStatus: key not found in any record\n\ntools/assertions/base_assertions.py:203: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748718143861,"stop":1748718143921,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"settings","time":{"start":1748718143921,"stop":1748718143923,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1748718143923,"stop":1748718143969,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"todos_client","time":{"start":1748718144123,"stop":1748718144124,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n            Тестирует GET /todos с различными заголовками.\n            ","status":"failed","statusMessage":"AssertionError: Body key value mismatches:\ndoneStatus: key not found in any record","statusTrace":"self = <test_challenges.TestChallenges.TestGetChallenges object at 0x7f8506c7a030>\ntodos_client = <clients.todos_client.TodosClient object at 0x7f8506cab5c0>\nheaders = None, params = {'doneStatus': True}\nexpected_status = <HTTPStatus.OK: 200>\n\n    @pytest.mark.regression\n    @allure.title(\"Get all todos. Headers[{headers}] Params [{params}]\")\n    @pytest.mark.parametrize(\n        \"headers, params, expected_status\",\n        [\n            (None, None, HTTPStatus.OK),  # Заголовки по умолчанию (из settings)\n            (None, {\"doneStatus\": True},HTTPStatus.OK),  # query параметр/фильтр\n            ({\"X-Challenger\": \"\"},None, HTTPStatus.OK),  # Пустой X-Challenger\n            ({\"X-Challenger\": \"test_token\", \"Accept\": \"application/xml\"}, None, HTTPStatus.OK),  # Дополнительный\n            # заголовок\n            (None, {\"id\": 3}, HTTPStatus.OK),  # query параметр/фильтр\n            ({\"Authorization\": \"Bearer invalid\"}, None, HTTPStatus.OK),  # Неверный заголовок\n        ],\n        ids=[\n            \"default_headers\",\n            \"doneStatus: True\",\n            \"empty_token\",\n            \"Accept_with_application/xml\",\n            \"id: 3\",\n            \"Wrong token\"\n        ]\n    )\n    def test_03_get_all_todos(self, todos_client: TodosClient, headers: dict | None, params: dict |\n                                                                                             None, expected_status:\n    int):\n        \"\"\"\n        Тестирует GET /todos с различными заголовками.\n        \"\"\"\n        checks = {\n            \"status_code\": expected_status,\n            \"response_time\": 5.0,\n            \"schema\": True,\n            \"headers_present\": [\"content-type\"],\n            \"header_values\": None,\n            \"key_present\": [\"todos\"],\n            \"key_value\": params,\n            \"request_headers\": headers\n        }\n        response = todos_client.get_all_todos(headers=headers, params=params)\n>       self.comprehensive_checks(response=response, checks=checks)\n\ntests/test_challenges.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/assertions/base_assertions.py:487: in comprehensive_checks\n    self.assert_body_key_values(response, checks[\"key_value\"])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_challenges.TestChallenges.TestGetChallenges object at 0x7f8506c7a030>\nresponse = <Response [200 OK]>, expected_values = {'doneStatus': True}\n\n    @allure.step(\"Check body key values: {expected_values}\")\n    def assert_body_key_values(self, response: Response, expected_values: Dict[str, Any]) -> None:\n        \"\"\"\n        Проверяет, что хотя бы одна запись в JSON-теле ответа содержит указанные ключи с ожидаемыми значениями.\n    \n        :param response: Объект HTTP-ответа (httpx.Response)\n        :param expected_values: Словарь с ключами и их ожидаемыми значениями\n        :raises AssertionError: Если JSON невалидный или ни одна запись не содержит ожидаемого значения\n        \"\"\"\n        logger.info(f\"Checking body key values: {expected_values}\")\n        try:\n            body = response.json()\n        except ValueError as e:\n            logger.error(f\"Response body is not valid JSON: {e}\")\n            allure.attach(\n                response.text,\n                name=\"Invalid JSON\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            raise AssertionError(f\"Response body is not valid JSON: {e}\")\n    \n        def find_key_values(data: Any, key: str, matches: List[Any]) -> None:\n            \"\"\"\n            Рекурсивно ищет все вхождения ключа в JSON и собирает их значения.\n    \n            :param data: Текущий JSON-объект (dict, list и т.д.)\n            :param key: Искомый ключ\n            :param matches: Список для хранения найденных значений\n            \"\"\"\n            if isinstance(data, dict):\n                if key in data:\n                    matches.append(data[key])\n                for value in data.values():\n                    find_key_values(value, key, matches)\n            elif isinstance(data, list):\n                for item in data:\n                    find_key_values(item, key, matches)\n    \n        mismatches = []\n        for key, expected_value in expected_values.items():\n            matches = []\n            find_key_values(body, key, matches)\n            if not matches:\n                mismatches.append(f\"{key}: key not found in any record\")\n            elif not any(actual_value == expected_value for actual_value in matches):\n                mismatches.append(\n                    f\"{key}: expected '{expected_value}', found values {matches}\"\n                )\n    \n        if mismatches:\n            logger.error(f\"Body key value mismatches: {mismatches}\")\n            allure.attach(\n                \"\\n\".join(mismatches),\n                name=\"Body Key Value Mismatches\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            allure.attach(\n                response.text,\n                name=\"Response Body\",\n                attachment_type=allure.attachment_type.JSON\n            )\n>           raise AssertionError(f\"Body key value mismatches:\\n{'\\n'.join(mismatches)}\")\nE           AssertionError: Body key value mismatches:\nE           doneStatus: key not found in any record\n\ntools/assertions/base_assertions.py:203: AssertionError","steps":[{"name":"Get all todos","time":{"start":1748718144135,"stop":1748718144142,"duration":7},"status":"passed","steps":[],"attachments":[{"uid":"cbcf02655beed2d2","name":"Request","source":"cbcf02655beed2d2.txt","type":"text/plain","size":10},{"uid":"75788d37a7efd4a0","name":"Request Headers","source":"75788d37a7efd4a0.txt","type":"text/plain","size":148},{"uid":"a429c626e8e9bb4a","name":"Request Query Params","source":"a429c626e8e9bb4a.txt","type":"text/plain","size":20},{"uid":"85238f4fa695a387","name":"Response Status","source":"85238f4fa695a387.txt","type":"text/plain","size":20},{"uid":"1ae66e702bfb0317","name":"Response Headers","source":"1ae66e702bfb0317.txt","type":"text/plain","size":875},{"uid":"fe6fcb7475b40c1a","name":"Response Body (JSON)","source":"fe6fcb7475b40c1a.json","type":"application/json","size":17}],"parameters":[{"name":"headers","value":"None"},{"name":"params","value":"{'doneStatus': True}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"Check status code is <HTTPStatus.OK: 200>","time":{"start":1748718144142,"stop":1748718144143,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"expected_status","value":"<HTTPStatus.OK: 200>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check response time is less than 5.0 seconds","time":{"start":1748718144143,"stop":1748718144143,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"67b3b06d1a583c81","name":"Response Time","source":"67b3b06d1a583c81.txt","type":"text/plain","size":41}],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"max_time","value":"5.0"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check headers present: ['content-type']","time":{"start":1748718144143,"stop":1748718144143,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"expected_headers","value":"['content-type']"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check header values: {'content-type': 'application/json'}","time":{"start":1748718144143,"stop":1748718144144,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"expected_headers","value":"{'content-type': 'application/json'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Validate JSON schema: TodosSchema","time":{"start":1748718144144,"stop":1748718144144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Check body keys present: ['todos']","time":{"start":1748718144144,"stop":1748718144144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"expected_keys","value":"['todos']"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check body key values: {'doneStatus': True}","time":{"start":1748718144144,"stop":1748718144145,"duration":1},"status":"failed","statusMessage":"AssertionError: Body key value mismatches:\ndoneStatus: key not found in any record\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/New_Pet_Api/New_Pet_Api/tools/assertions/base_assertions.py\", line 203, in assert_body_key_values\n    raise AssertionError(f\"Body key value mismatches:\\n{'\\n'.join(mismatches)}\")\n","steps":[],"attachments":[{"uid":"c7076890a040c29a","name":"Body Key Value Mismatches","source":"c7076890a040c29a.json","type":"application/json","size":39},{"uid":"cbc0ace19455e361","name":"Response Body","source":"cbc0ace19455e361.json","type":"application/json","size":12}],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"expected_values","value":"{'doneStatus': True}"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b9ac3e824ec728c5","name":"log","source":"b9ac3e824ec728c5.txt","type":"text/plain","size":4673}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":10,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"client::0","time":{"start":1748718144316,"stop":1748718144316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Challenges API"},{"name":"story","value":"Get Challenges"},{"name":"tag","value":"regression"},{"name":"tag","value":"challenges"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_challenges"},{"name":"subSuite","value":"TestChallenges"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2113-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_challenges"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"<HTTPStatus.OK: 200>"},{"name":"headers","value":"None"},{"name":"params","value":"{'doneStatus': True}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["challenges","regression"]},"source":"d7795633f7de1000.json","parameterValues":["<HTTPStatus.OK: 200>","None","{'doneStatus': True}"]}