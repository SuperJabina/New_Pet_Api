{"uid":"b5a6d6b506f0c831","name":"Get all challenges with headers=None","fullName":"tests.test_challenges.TestChallenges#test_get_challenges","historyId":"ed59db8a5352c4f7687b74772bf34184","time":{"start":1747771189660,"stop":1747771189711,"duration":51},"description":"\n        Тестирует GET /challenges с различными заголовками.\n        ","descriptionHtml":"<pre><code>    Тестирует GET /challenges с различными заголовками.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Expected status code 401, got 200","statusTrace":"self = <test_challenges.TestChallenges object at 0x7f4a61a00680>\nchallenges_client = <clients.challenges_client.ChallengesClient object at 0x7f4a612ff410>\nheaders = None, expected_status = <HTTPStatus.UNAUTHORIZED: 401>\n\n    @pytest.mark.regression\n    @allure.title(\"Get all challenges with headers={headers}\")\n    @pytest.mark.parametrize(\n        \"headers, expected_status\",\n        [\n            (None, HTTPStatus.UNAUTHORIZED),  # Заголовки по умолчанию (из settings)\n            ({\"X-Challenger\": \"\"}, HTTPStatus.OK),  # Пустой X-Challenger\n            ({\"X-Challenger\": \"test_token\", \"Accept\": \"application/xml\"}, HTTPStatus.UNAUTHORIZED),  # Дополнительный заголовок\n            ({\"Authorization\": \"Bearer invalid\"}, HTTPStatus.OK),  # Неверный заголовок\n        ],\n        ids=[\n            \"default_headers\",\n            \"empty_headers\",\n            \"Accept_with_application/xml\",\n            \"invalid_authorization\"\n        ]\n    )\n    def test_get_challenges(self, challenges_client: ChallengesClient, headers: dict | None, expected_status: int):\n        \"\"\"\n        Тестирует GET /challenges с различными заголовками.\n        \"\"\"\n        response = challenges_client.get_challenges_api(headers=headers)\n    \n>       ChallengesAsserts.assert_status_code(response, expected_status)\n\ntests/test_challenges.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200 OK]>, expected_status = <HTTPStatus.UNAUTHORIZED: 401>\n\n    @staticmethod\n    @allure.step(\"Check status code is {expected_status}\")\n    def assert_status_code(response: Response, expected_status: int) -> None:\n        \"\"\"\n        Проверяет, что статус-код ответа равен ожидаемому.\n        \"\"\"\n        actual_status = response.status_code\n        if actual_status != expected_status:\n            allure.attach(\n                f\"Expected: {expected_status}\\nActual: {actual_status}\",\n                name=\"Status Code Mismatch\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise AssertionError(f\"Expected status code {expected_status}, got {actual_status}\")\nE           AssertionError: Expected status code 401, got 200\n\ntools/assertions/base_assertions.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747771189546,"stop":1747771189610,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"settings","time":{"start":1747771189610,"stop":1747771189612,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1747771189612,"stop":1747771189659,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"challenges_client","time":{"start":1747771189659,"stop":1747771189659,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Тестирует GET /challenges с различными заголовками.\n        ","status":"failed","statusMessage":"AssertionError: Expected status code 401, got 200","statusTrace":"self = <test_challenges.TestChallenges object at 0x7f4a61a00680>\nchallenges_client = <clients.challenges_client.ChallengesClient object at 0x7f4a612ff410>\nheaders = None, expected_status = <HTTPStatus.UNAUTHORIZED: 401>\n\n    @pytest.mark.regression\n    @allure.title(\"Get all challenges with headers={headers}\")\n    @pytest.mark.parametrize(\n        \"headers, expected_status\",\n        [\n            (None, HTTPStatus.UNAUTHORIZED),  # Заголовки по умолчанию (из settings)\n            ({\"X-Challenger\": \"\"}, HTTPStatus.OK),  # Пустой X-Challenger\n            ({\"X-Challenger\": \"test_token\", \"Accept\": \"application/xml\"}, HTTPStatus.UNAUTHORIZED),  # Дополнительный заголовок\n            ({\"Authorization\": \"Bearer invalid\"}, HTTPStatus.OK),  # Неверный заголовок\n        ],\n        ids=[\n            \"default_headers\",\n            \"empty_headers\",\n            \"Accept_with_application/xml\",\n            \"invalid_authorization\"\n        ]\n    )\n    def test_get_challenges(self, challenges_client: ChallengesClient, headers: dict | None, expected_status: int):\n        \"\"\"\n        Тестирует GET /challenges с различными заголовками.\n        \"\"\"\n        response = challenges_client.get_challenges_api(headers=headers)\n    \n>       ChallengesAsserts.assert_status_code(response, expected_status)\n\ntests/test_challenges.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200 OK]>, expected_status = <HTTPStatus.UNAUTHORIZED: 401>\n\n    @staticmethod\n    @allure.step(\"Check status code is {expected_status}\")\n    def assert_status_code(response: Response, expected_status: int) -> None:\n        \"\"\"\n        Проверяет, что статус-код ответа равен ожидаемому.\n        \"\"\"\n        actual_status = response.status_code\n        if actual_status != expected_status:\n            allure.attach(\n                f\"Expected: {expected_status}\\nActual: {actual_status}\",\n                name=\"Status Code Mismatch\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise AssertionError(f\"Expected status code {expected_status}, got {actual_status}\")\nE           AssertionError: Expected status code 401, got 200\n\ntools/assertions/base_assertions.py:25: AssertionError","steps":[{"name":"Get all challenges","time":{"start":1747771189660,"stop":1747771189710,"duration":50},"status":"passed","steps":[],"attachments":[{"uid":"648a5159b6770b4","name":"Request","source":"648a5159b6770b4.txt","type":"text/plain","size":15},{"uid":"d1e2dd77e5ea4a93","name":"Request Headers","source":"d1e2dd77e5ea4a93.txt","type":"text/plain","size":148},{"uid":"a478136095287e70","name":"Response Status","source":"a478136095287e70.txt","type":"text/plain","size":20},{"uid":"4959141563fae058","name":"Response Headers","source":"4959141563fae058.txt","type":"text/plain","size":880},{"uid":"2852da86b206ea5","name":"Response Body (JSON)","source":"2852da86b206ea5.json","type":"application/json","size":11617}],"parameters":[{"name":"headers","value":"None"},{"name":"params","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},{"name":"Check status code is <HTTPStatus.UNAUTHORIZED: 401>","time":{"start":1747771189710,"stop":1747771189710,"duration":0},"status":"failed","statusMessage":"AssertionError: Expected status code 401, got 200\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/New_Pet_Api/New_Pet_Api/tools/assertions/base_assertions.py\", line 25, in assert_status_code\n    raise AssertionError(f\"Expected status code {expected_status}, got {actual_status}\")\n","steps":[],"attachments":[{"uid":"6e806b323a88af73","name":"Status Code Mismatch","source":"6e806b323a88af73.txt","type":"text/plain","size":25}],"parameters":[{"name":"response","value":"<Response [200 OK]>"},{"name":"expected_status","value":"<HTTPStatus.UNAUTHORIZED: 401>"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"71ac3f8a110e7f4a","name":"log","source":"71ac3f8a110e7f4a.txt","type":"text/plain","size":814}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"client::0","time":{"start":1747771189907,"stop":1747771189907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Challenges API"},{"name":"tag","value":"regression"},{"name":"tag","value":"challenges"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_challenges"},{"name":"subSuite","value":"TestChallenges"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2124-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_challenges"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"<HTTPStatus.UNAUTHORIZED: 401>"},{"name":"headers","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"6103e48422fe7640","reportUrl":"https://SuperJabina.github.io/New_Pet_Api/11//#testresult/6103e48422fe7640","status":"failed","statusDetails":"AssertionError: Expected status code 401, got 200","time":{"start":1747770710566,"stop":1747770710627,"duration":61}}]},"tags":["challenges","regression"]},"source":"b5a6d6b506f0c831.json","parameterValues":["<HTTPStatus.UNAUTHORIZED: 401>","None"]}